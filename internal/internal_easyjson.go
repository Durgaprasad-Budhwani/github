// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package internal

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal(in *jlexer.Lexer, out *webhookResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "url":
			out.URL = string(in.String())
		case "active":
			out.Active = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal(out *jwriter.Writer, in webhookResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		out.Bool(bool(in.Active))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v webhookResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v webhookResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *webhookResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *webhookResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal1(in *jlexer.Lexer, out *viewerResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "viewer":
			easyjson2a877177Decode(in, &out.Viewer)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal1(out *jwriter.Writer, in viewerResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"viewer\":"
		out.RawString(prefix[1:])
		easyjson2a877177Encode(out, in.Viewer)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v viewerResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v viewerResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *viewerResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *viewerResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal1(l, v)
}
func easyjson2a877177Decode(in *jlexer.Lexer, out *struct {
	Login string `json:"login"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode(out *jwriter.Writer, in struct {
	Login string `json:"login"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	out.RawByte('}')
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal2(in *jlexer.Lexer, out *repositoryPullrequests) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "repository":
			(out.Repository).UnmarshalEasyJSON(in)
		case "rateLimit":
			(out.RateLimit).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal2(out *jwriter.Writer, in repositoryPullrequests) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"repository\":"
		out.RawString(prefix[1:])
		(in.Repository).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"rateLimit\":"
		out.RawString(prefix)
		(in.RateLimit).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repositoryPullrequests) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repositoryPullrequests) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repositoryPullrequests) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repositoryPullrequests) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal2(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal3(in *jlexer.Lexer, out *repository) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "nameWithOwner":
			out.Name = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "description":
			out.Description = string(in.String())
		case "primaryLanguage":
			(out.Language).UnmarshalEasyJSON(in)
		case "defaultBranchRef":
			(out.DefaultBranch).UnmarshalEasyJSON(in)
		case "isArchived":
			out.IsArchived = bool(in.Bool())
		case "isFork":
			out.IsFork = bool(in.Bool())
		case "hasProjectsEnabled":
			out.HasProjects = bool(in.Bool())
		case "hasIssuesEnabled":
			out.HasIssues = bool(in.Bool())
		case "labels":
			(out.Labels).UnmarshalEasyJSON(in)
		case "pullRequests":
			(out.Pullrequests).UnmarshalEasyJSON(in)
		case "owner":
			easyjson2a877177Decode(in, &out.Owner)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal3(out *jwriter.Writer, in repository) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"nameWithOwner\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"primaryLanguage\":"
		out.RawString(prefix)
		(in.Language).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"defaultBranchRef\":"
		out.RawString(prefix)
		(in.DefaultBranch).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"isArchived\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsArchived))
	}
	{
		const prefix string = ",\"isFork\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFork))
	}
	{
		const prefix string = ",\"hasProjectsEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasProjects))
	}
	{
		const prefix string = ",\"hasIssuesEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasIssues))
	}
	{
		const prefix string = ",\"labels\":"
		out.RawString(prefix)
		(in.Labels).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"pullRequests\":"
		out.RawString(prefix)
		(in.Pullrequests).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		easyjson2a877177Encode(out, in.Owner)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repository) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repository) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repository) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repository) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal3(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal4(in *jlexer.Lexer, out *repoWithNameResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			easyjson2a877177Decode1(in, &out.Data)
		case "rateLimit":
			(out.RateLimit).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal4(out *jwriter.Writer, in repoWithNameResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		easyjson2a877177Encode1(out, in.Data)
	}
	{
		const prefix string = ",\"rateLimit\":"
		out.RawString(prefix)
		(in.RateLimit).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repoWithNameResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repoWithNameResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repoWithNameResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repoWithNameResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal4(l, v)
}
func easyjson2a877177Decode1(in *jlexer.Lexer, out *struct {
	Repositories struct {
		TotalCount int        `json:"totalCount"`
		PageInfo   pageInfo   `json:"pageInfo"`
		Nodes      []repoName `json:"nodes"`
	} `json:"repositories"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "repositories":
			easyjson2a877177Decode2(in, &out.Repositories)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode1(out *jwriter.Writer, in struct {
	Repositories struct {
		TotalCount int        `json:"totalCount"`
		PageInfo   pageInfo   `json:"pageInfo"`
		Nodes      []repoName `json:"nodes"`
	} `json:"repositories"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"repositories\":"
		out.RawString(prefix[1:])
		easyjson2a877177Encode2(out, in.Repositories)
	}
	out.RawByte('}')
}
func easyjson2a877177Decode2(in *jlexer.Lexer, out *struct {
	TotalCount int        `json:"totalCount"`
	PageInfo   pageInfo   `json:"pageInfo"`
	Nodes      []repoName `json:"nodes"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalCount":
			out.TotalCount = int(in.Int())
		case "pageInfo":
			(out.PageInfo).UnmarshalEasyJSON(in)
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]repoName, 0, 1)
					} else {
						out.Nodes = []repoName{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 repoName
					(v1).UnmarshalEasyJSON(in)
					out.Nodes = append(out.Nodes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode2(out *jwriter.Writer, in struct {
	TotalCount int        `json:"totalCount"`
	PageInfo   pageInfo   `json:"pageInfo"`
	Nodes      []repoName `json:"nodes"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalCount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalCount))
	}
	{
		const prefix string = ",\"pageInfo\":"
		out.RawString(prefix)
		(in.PageInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix)
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Nodes {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal5(in *jlexer.Lexer, out *repoProjectNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]repoProject, 0, 1)
					} else {
						out.Nodes = []repoProject{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v4 repoProject
					(v4).UnmarshalEasyJSON(in)
					out.Nodes = append(out.Nodes, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal5(out *jwriter.Writer, in repoProjectNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix[1:])
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Nodes {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repoProjectNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repoProjectNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repoProjectNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repoProjectNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal5(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal6(in *jlexer.Lexer, out *repoProjectColumnNodes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]repoProjectColumn, 0, 1)
					} else {
						out.Nodes = []repoProjectColumn{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 repoProjectColumn
					(v7).UnmarshalEasyJSON(in)
					out.Nodes = append(out.Nodes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal6(out *jwriter.Writer, in repoProjectColumnNodes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix[1:])
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Nodes {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repoProjectColumnNodes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repoProjectColumnNodes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repoProjectColumnNodes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repoProjectColumnNodes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal6(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal7(in *jlexer.Lexer, out *repoProjectColumn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "purpose":
			out.Purpose = string(in.String())
		case "cards":
			(out.Cards).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal7(out *jwriter.Writer, in repoProjectColumn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"purpose\":"
		out.RawString(prefix)
		out.String(string(in.Purpose))
	}
	{
		const prefix string = ",\"cards\":"
		out.RawString(prefix)
		(in.Cards).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repoProjectColumn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repoProjectColumn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repoProjectColumn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repoProjectColumn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal7(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal8(in *jlexer.Lexer, out *repoProjectCardNodes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]repoProjectCard, 0, 1)
					} else {
						out.Nodes = []repoProjectCard{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v10 repoProjectCard
					(v10).UnmarshalEasyJSON(in)
					out.Nodes = append(out.Nodes, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal8(out *jwriter.Writer, in repoProjectCardNodes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix[1:])
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Nodes {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repoProjectCardNodes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repoProjectCardNodes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repoProjectCardNodes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repoProjectCardNodes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal8(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal9(in *jlexer.Lexer, out *repoProjectCardContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "__typename":
			out.Type = string(in.String())
		case "id":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal9(out *jwriter.Writer, in repoProjectCardContent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"__typename\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repoProjectCardContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repoProjectCardContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repoProjectCardContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repoProjectCardContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal9(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal10(in *jlexer.Lexer, out *repoProjectCard) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "state":
			out.State = string(in.String())
		case "note":
			out.Note = string(in.String())
		case "content":
			(out.Content).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal10(out *jwriter.Writer, in repoProjectCard) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"note\":"
		out.RawString(prefix)
		out.String(string(in.Note))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		(in.Content).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repoProjectCard) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repoProjectCard) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repoProjectCard) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repoProjectCard) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal10(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal11(in *jlexer.Lexer, out *repoProject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "columns":
			(out.Columns).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal11(out *jwriter.Writer, in repoProject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"columns\":"
		out.RawString(prefix)
		(in.Columns).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repoProject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repoProject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repoProject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repoProject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal11(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal12(in *jlexer.Lexer, out *repoName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.RepoName = string(in.String())
		case "nameWithOwner":
			out.Name = string(in.String())
		case "isPrivate":
			out.IsPrivate = bool(in.Bool())
		case "isArchived":
			out.IsArchived = bool(in.Bool())
		case "hasProjectsEnabled":
			out.HasProjectsEnabled = bool(in.Bool())
		case "hasIssuesEnabled":
			out.HasIssuesEnabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal12(out *jwriter.Writer, in repoName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.RepoName))
	}
	{
		const prefix string = ",\"nameWithOwner\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"isPrivate\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPrivate))
	}
	{
		const prefix string = ",\"isArchived\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsArchived))
	}
	{
		const prefix string = ",\"hasProjectsEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasProjectsEnabled))
	}
	{
		const prefix string = ",\"hasIssuesEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasIssuesEnabled))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repoName) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repoName) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repoName) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repoName) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal12(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal13(in *jlexer.Lexer, out *repProjectResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "repository":
			easyjson2a877177Decode3(in, &out.Repository)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal13(out *jwriter.Writer, in repProjectResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"repository\":"
		out.RawString(prefix[1:])
		easyjson2a877177Encode3(out, in.Repository)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repProjectResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repProjectResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repProjectResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repProjectResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal13(l, v)
}
func easyjson2a877177Decode3(in *jlexer.Lexer, out *struct {
	Projects repoProjectNode `json:"projects"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "projects":
			(out.Projects).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode3(out *jwriter.Writer, in struct {
	Projects repoProjectNode `json:"projects"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"projects\":"
		out.RawString(prefix[1:])
		(in.Projects).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal14(in *jlexer.Lexer, out *rateLimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limit":
			out.Limit = int(in.Int())
		case "cost":
			out.Cost = int(in.Int())
		case "remaining":
			out.Remaining = int(in.Int())
		case "resetAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ResetAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal14(out *jwriter.Writer, in rateLimit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Limit))
	}
	{
		const prefix string = ",\"cost\":"
		out.RawString(prefix)
		out.Int(int(in.Cost))
	}
	{
		const prefix string = ",\"remaining\":"
		out.RawString(prefix)
		out.Int(int(in.Remaining))
	}
	{
		const prefix string = ",\"resetAt\":"
		out.RawString(prefix)
		out.Raw((in.ResetAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v rateLimit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v rateLimit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *rateLimit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *rateLimit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal14(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal15(in *jlexer.Lexer, out *pullrequests) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalCount":
			out.TotalCount = int(in.Int())
		case "pageInfo":
			(out.PageInfo).UnmarshalEasyJSON(in)
		case "edges":
			if in.IsNull() {
				in.Skip()
				out.Edges = nil
			} else {
				in.Delim('[')
				if out.Edges == nil {
					if !in.IsDelim(']') {
						out.Edges = make([]pullrequestNode, 0, 1)
					} else {
						out.Edges = []pullrequestNode{}
					}
				} else {
					out.Edges = (out.Edges)[:0]
				}
				for !in.IsDelim(']') {
					var v13 pullrequestNode
					(v13).UnmarshalEasyJSON(in)
					out.Edges = append(out.Edges, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal15(out *jwriter.Writer, in pullrequests) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalCount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalCount))
	}
	{
		const prefix string = ",\"pageInfo\":"
		out.RawString(prefix)
		(in.PageInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"edges\":"
		out.RawString(prefix)
		if in.Edges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Edges {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequests) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequests) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequests) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequests) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal15(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal16(in *jlexer.Lexer, out *pullrequestreviewsNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cursor":
			out.Cursor = string(in.String())
		case "node":
			(out.Node).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal16(out *jwriter.Writer, in pullrequestreviewsNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cursor\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cursor))
	}
	{
		const prefix string = ",\"node\":"
		out.RawString(prefix)
		(in.Node).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestreviewsNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestreviewsNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestreviewsNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestreviewsNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal16(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal17(in *jlexer.Lexer, out *pullrequestreviews) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalCount":
			out.TotalCount = int(in.Int())
		case "pageInfo":
			(out.PageInfo).UnmarshalEasyJSON(in)
		case "edges":
			if in.IsNull() {
				in.Skip()
				out.Edges = nil
			} else {
				in.Delim('[')
				if out.Edges == nil {
					if !in.IsDelim(']') {
						out.Edges = make([]pullrequestreviewsNode, 0, 1)
					} else {
						out.Edges = []pullrequestreviewsNode{}
					}
				} else {
					out.Edges = (out.Edges)[:0]
				}
				for !in.IsDelim(']') {
					var v16 pullrequestreviewsNode
					(v16).UnmarshalEasyJSON(in)
					out.Edges = append(out.Edges, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal17(out *jwriter.Writer, in pullrequestreviews) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalCount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalCount))
	}
	{
		const prefix string = ",\"pageInfo\":"
		out.RawString(prefix)
		(in.PageInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"edges\":"
		out.RawString(prefix)
		if in.Edges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Edges {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestreviews) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestreviews) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestreviews) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestreviews) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal17(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal18(in *jlexer.Lexer, out *pullrequestreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "state":
			out.State = string(in.String())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "author":
			(out.Author).UnmarshalEasyJSON(in)
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal18(out *jwriter.Writer, in pullrequestreview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		(in.Author).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal18(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal19(in *jlexer.Lexer, out *pullrequestcommits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalCount":
			out.TotalCount = int(in.Int())
		case "pageInfo":
			(out.PageInfo).UnmarshalEasyJSON(in)
		case "edges":
			if in.IsNull() {
				in.Skip()
				out.Edges = nil
			} else {
				in.Delim('[')
				if out.Edges == nil {
					if !in.IsDelim(']') {
						out.Edges = make([]pullrequestcommitNode, 0, 1)
					} else {
						out.Edges = []pullrequestcommitNode{}
					}
				} else {
					out.Edges = (out.Edges)[:0]
				}
				for !in.IsDelim(']') {
					var v19 pullrequestcommitNode
					(v19).UnmarshalEasyJSON(in)
					out.Edges = append(out.Edges, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal19(out *jwriter.Writer, in pullrequestcommits) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalCount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalCount))
	}
	{
		const prefix string = ",\"pageInfo\":"
		out.RawString(prefix)
		(in.PageInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"edges\":"
		out.RawString(prefix)
		if in.Edges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Edges {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestcommits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestcommits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestcommits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestcommits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal19(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal20(in *jlexer.Lexer, out *pullrequestcommitNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cursor":
			out.Cursor = string(in.String())
		case "node":
			(out.Node).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal20(out *jwriter.Writer, in pullrequestcommitNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cursor\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cursor))
	}
	{
		const prefix string = ",\"node\":"
		out.RawString(prefix)
		(in.Node).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestcommitNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestcommitNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestcommitNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestcommitNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal20(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal21(in *jlexer.Lexer, out *pullrequestcommit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commit":
			(out.Commit).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal21(out *jwriter.Writer, in pullrequestcommit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commit\":"
		out.RawString(prefix[1:])
		(in.Commit).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestcommit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestcommit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestcommit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestcommit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal21(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal22(in *jlexer.Lexer, out *pullrequestcommentsNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cursor":
			out.Cursor = string(in.String())
		case "node":
			(out.Node).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal22(out *jwriter.Writer, in pullrequestcommentsNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cursor\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cursor))
	}
	{
		const prefix string = ",\"node\":"
		out.RawString(prefix)
		(in.Node).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestcommentsNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestcommentsNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestcommentsNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestcommentsNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal22(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal23(in *jlexer.Lexer, out *pullrequestcomments) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalCount":
			out.TotalCount = int(in.Int())
		case "pageInfo":
			(out.PageInfo).UnmarshalEasyJSON(in)
		case "edges":
			if in.IsNull() {
				in.Skip()
				out.Edges = nil
			} else {
				in.Delim('[')
				if out.Edges == nil {
					if !in.IsDelim(']') {
						out.Edges = make([]pullrequestcommentsNode, 0, 1)
					} else {
						out.Edges = []pullrequestcommentsNode{}
					}
				} else {
					out.Edges = (out.Edges)[:0]
				}
				for !in.IsDelim(']') {
					var v22 pullrequestcommentsNode
					(v22).UnmarshalEasyJSON(in)
					out.Edges = append(out.Edges, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal23(out *jwriter.Writer, in pullrequestcomments) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalCount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalCount))
	}
	{
		const prefix string = ",\"pageInfo\":"
		out.RawString(prefix)
		(in.PageInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"edges\":"
		out.RawString(prefix)
		if in.Edges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Edges {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestcomments) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestcomments) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestcomments) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestcomments) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal23(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal24(in *jlexer.Lexer, out *pullrequestcomment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "author":
			(out.Author).UnmarshalEasyJSON(in)
		case "url":
			out.URL = string(in.String())
		case "bodyHTML":
			out.Body = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal24(out *jwriter.Writer, in pullrequestcomment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		(in.Author).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"bodyHTML\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestcomment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestcomment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestcomment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestcomment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal24(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal25(in *jlexer.Lexer, out *pullrequestTimelineItems) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]author, 0, 1)
					} else {
						out.Nodes = []author{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v25 author
					(v25).UnmarshalEasyJSON(in)
					out.Nodes = append(out.Nodes, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal25(out *jwriter.Writer, in pullrequestTimelineItems) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix[1:])
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Nodes {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestTimelineItems) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestTimelineItems) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestTimelineItems) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestTimelineItems) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal25(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal26(in *jlexer.Lexer, out *pullrequestPagedCommitsResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rateLimit":
			(out.RateLimit).UnmarshalEasyJSON(in)
		case "node":
			(out.Node).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal26(out *jwriter.Writer, in pullrequestPagedCommitsResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rateLimit\":"
		out.RawString(prefix[1:])
		(in.RateLimit).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"node\":"
		out.RawString(prefix)
		(in.Node).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestPagedCommitsResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestPagedCommitsResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestPagedCommitsResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestPagedCommitsResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal26(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal27(in *jlexer.Lexer, out *pullrequestPagedCommits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalCount":
			out.TotalCount = int(in.Int())
		case "pageInfo":
			(out.PageInfo).UnmarshalEasyJSON(in)
		case "commits":
			(out.Commits).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal27(out *jwriter.Writer, in pullrequestPagedCommits) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalCount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalCount))
	}
	{
		const prefix string = ",\"pageInfo\":"
		out.RawString(prefix)
		(in.PageInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"commits\":"
		out.RawString(prefix)
		(in.Commits).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestPagedCommits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestPagedCommits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestPagedCommits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestPagedCommits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal27(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal28(in *jlexer.Lexer, out *pullrequestPagedCommitNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "node":
			(out.Node).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal28(out *jwriter.Writer, in pullrequestPagedCommitNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"node\":"
		out.RawString(prefix[1:])
		(in.Node).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestPagedCommitNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestPagedCommitNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestPagedCommitNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestPagedCommitNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal28(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal29(in *jlexer.Lexer, out *pullrequestPagedCommitEdges) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cursor":
			out.Cursor = string(in.String())
		case "edges":
			if in.IsNull() {
				in.Skip()
				out.Edges = nil
			} else {
				in.Delim('[')
				if out.Edges == nil {
					if !in.IsDelim(']') {
						out.Edges = make([]pullrequestPagedCommitNode, 0, 1)
					} else {
						out.Edges = []pullrequestPagedCommitNode{}
					}
				} else {
					out.Edges = (out.Edges)[:0]
				}
				for !in.IsDelim(']') {
					var v28 pullrequestPagedCommitNode
					(v28).UnmarshalEasyJSON(in)
					out.Edges = append(out.Edges, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal29(out *jwriter.Writer, in pullrequestPagedCommitEdges) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cursor\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cursor))
	}
	{
		const prefix string = ",\"edges\":"
		out.RawString(prefix)
		if in.Edges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Edges {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestPagedCommitEdges) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestPagedCommitEdges) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestPagedCommitEdges) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestPagedCommitEdges) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal29(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal30(in *jlexer.Lexer, out *pullrequestPagedCommit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commit":
			(out.Commit).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal30(out *jwriter.Writer, in pullrequestPagedCommit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commit\":"
		out.RawString(prefix[1:])
		(in.Commit).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestPagedCommit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestPagedCommit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestPagedCommit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestPagedCommit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal30(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal31(in *jlexer.Lexer, out *pullrequestNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cursor":
			out.Cursor = string(in.String())
		case "node":
			(out.Node).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal31(out *jwriter.Writer, in pullrequestNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cursor\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cursor))
	}
	{
		const prefix string = ",\"node\":"
		out.RawString(prefix)
		(in.Node).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal31(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal32(in *jlexer.Lexer, out *pullrequestCommit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sha":
			out.Sha = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "authoredDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "additions":
			out.Additions = int64(in.Int64())
		case "deletions":
			out.Deletions = int64(in.Int64())
		case "url":
			out.URL = string(in.String())
		case "author":
			(out.Author).UnmarshalEasyJSON(in)
		case "committer":
			(out.Committer).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal32(out *jwriter.Writer, in pullrequestCommit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sha\":"
		out.RawString(prefix[1:])
		out.String(string(in.Sha))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"authoredDate\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"additions\":"
		out.RawString(prefix)
		out.Int64(int64(in.Additions))
	}
	{
		const prefix string = ",\"deletions\":"
		out.RawString(prefix)
		out.Int64(int64(in.Deletions))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		(in.Author).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"committer\":"
		out.RawString(prefix)
		(in.Committer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequestCommit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequestCommit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequestCommit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequestCommit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal32(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal33(in *jlexer.Lexer, out *pullrequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "bodyHTML":
			out.Body = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "closed":
			out.Closed = bool(in.Bool())
		case "draft":
			out.Draft = bool(in.Bool())
		case "locked":
			out.Locked = bool(in.Bool())
		case "merged":
			out.Merged = bool(in.Bool())
		case "number":
			out.Number = int(in.Int())
		case "state":
			out.State = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "mergedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MergedAt).UnmarshalJSON(data))
			}
		case "author":
			(out.Author).UnmarshalEasyJSON(in)
		case "branch":
			out.Branch = string(in.String())
		case "mergeCommit":
			(out.MergeCommit).UnmarshalEasyJSON(in)
		case "mergedBy":
			(out.MergedBy).UnmarshalEasyJSON(in)
		case "commits":
			(out.Commits).UnmarshalEasyJSON(in)
		case "reviews":
			(out.Reviews).UnmarshalEasyJSON(in)
		case "comments":
			(out.Comments).UnmarshalEasyJSON(in)
		case "timelineItems":
			(out.TimelineItems).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal33(out *jwriter.Writer, in pullrequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"bodyHTML\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"closed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Closed))
	}
	{
		const prefix string = ",\"draft\":"
		out.RawString(prefix)
		out.Bool(bool(in.Draft))
	}
	{
		const prefix string = ",\"locked\":"
		out.RawString(prefix)
		out.Bool(bool(in.Locked))
	}
	{
		const prefix string = ",\"merged\":"
		out.RawString(prefix)
		out.Bool(bool(in.Merged))
	}
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix)
		out.Int(int(in.Number))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"mergedAt\":"
		out.RawString(prefix)
		out.Raw((in.MergedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		(in.Author).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"branch\":"
		out.RawString(prefix)
		out.String(string(in.Branch))
	}
	{
		const prefix string = ",\"mergeCommit\":"
		out.RawString(prefix)
		(in.MergeCommit).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"mergedBy\":"
		out.RawString(prefix)
		(in.MergedBy).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"commits\":"
		out.RawString(prefix)
		(in.Commits).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"reviews\":"
		out.RawString(prefix)
		(in.Reviews).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		(in.Comments).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"timelineItems\":"
		out.RawString(prefix)
		(in.TimelineItems).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pullrequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pullrequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pullrequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pullrequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal33(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal34(in *jlexer.Lexer, out *pageInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hasNextPage":
			out.HasNextPage = bool(in.Bool())
		case "startCursor":
			out.StartCursor = string(in.String())
		case "endCursor":
			out.EndCursor = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal34(out *jwriter.Writer, in pageInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hasNextPage\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.HasNextPage))
	}
	{
		const prefix string = ",\"startCursor\":"
		out.RawString(prefix)
		out.String(string(in.StartCursor))
	}
	{
		const prefix string = ",\"endCursor\":"
		out.RawString(prefix)
		out.String(string(in.EndCursor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pageInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pageInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pageInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pageInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal34(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal35(in *jlexer.Lexer, out *organizations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]org, 0, 1)
					} else {
						out.Nodes = []org{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v31 org
					(v31).UnmarshalEasyJSON(in)
					out.Nodes = append(out.Nodes, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal35(out *jwriter.Writer, in organizations) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix[1:])
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Nodes {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v organizations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v organizations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *organizations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *organizations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal35(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal36(in *jlexer.Lexer, out *org) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "viewerIsAMember":
			out.IsMember = bool(in.Bool())
		case "viewerCanAdminister":
			out.IsAdmin = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal36(out *jwriter.Writer, in org) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"viewerIsAMember\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMember))
	}
	{
		const prefix string = ",\"viewerCanAdminister\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAdmin))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v org) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v org) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *org) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *org) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal36(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal37(in *jlexer.Lexer, out *oidProp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "oid":
			out.Oid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal37(out *jwriter.Writer, in oidProp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"oid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Oid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v oidProp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v oidProp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *oidProp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *oidProp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal37(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal38(in *jlexer.Lexer, out *nameProp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal38(out *jwriter.Writer, in nameProp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v nameProp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v nameProp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *nameProp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *nameProp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal38(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal39(in *jlexer.Lexer, out *mutationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clientMutationId":
			out.ID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal39(out *jwriter.Writer, in mutationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clientMutationId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v mutationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v mutationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *mutationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *mutationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal39(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal40(in *jlexer.Lexer, out *labelNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]label, 0, 1)
					} else {
						out.Nodes = []label{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v34 label
					(v34).UnmarshalEasyJSON(in)
					out.Nodes = append(out.Nodes, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal40(out *jwriter.Writer, in labelNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix[1:])
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Nodes {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v labelNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v labelNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *labelNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *labelNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal40(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal41(in *jlexer.Lexer, out *label) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal41(out *jwriter.Writer, in label) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v label) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v label) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *label) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *label) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal41(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal42(in *jlexer.Lexer, out *issueResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rateLimit":
			(out.RateLimit).UnmarshalEasyJSON(in)
		case "repository":
			(out.Repository).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal42(out *jwriter.Writer, in issueResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rateLimit\":"
		out.RawString(prefix[1:])
		(in.RateLimit).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"repository\":"
		out.RawString(prefix)
		(in.Repository).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal42(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal43(in *jlexer.Lexer, out *issueRepository) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "issues":
			(out.Issues).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal43(out *jwriter.Writer, in issueRepository) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"issues\":"
		out.RawString(prefix[1:])
		(in.Issues).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueRepository) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueRepository) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueRepository) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueRepository) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal43(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal44(in *jlexer.Lexer, out *issueNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalCount":
			out.TotalCount = int(in.Int())
		case "pageInfo":
			(out.PageInfo).UnmarshalEasyJSON(in)
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]issue, 0, 1)
					} else {
						out.Nodes = []issue{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v37 issue
					(v37).UnmarshalEasyJSON(in)
					out.Nodes = append(out.Nodes, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal44(out *jwriter.Writer, in issueNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalCount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalCount))
	}
	{
		const prefix string = ",\"pageInfo\":"
		out.RawString(prefix)
		(in.PageInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix)
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Nodes {
				if v38 > 0 {
					out.RawByte(',')
				}
				(v39).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal44(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal45(in *jlexer.Lexer, out *issue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "__typename":
			out.Typename = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "closedAt":
			if in.IsNull() {
				in.Skip()
				out.ClosedAt = nil
			} else {
				if out.ClosedAt == nil {
					out.ClosedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ClosedAt).UnmarshalJSON(data))
				}
			}
		case "state":
			out.State = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "body":
			out.Body = string(in.String())
		case "closed":
			out.Closed = bool(in.Bool())
		case "labels":
			(out.Labels).UnmarshalEasyJSON(in)
		case "comments":
			(out.Comments).UnmarshalEasyJSON(in)
		case "assignees":
			(out.Assignees).UnmarshalEasyJSON(in)
		case "author":
			(out.Author).UnmarshalEasyJSON(in)
		case "number":
			out.Number = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal45(out *jwriter.Writer, in issue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"__typename\":"
		out.RawString(prefix[1:])
		out.String(string(in.Typename))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"closedAt\":"
		out.RawString(prefix)
		if in.ClosedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ClosedAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"closed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Closed))
	}
	{
		const prefix string = ",\"labels\":"
		out.RawString(prefix)
		(in.Labels).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		(in.Comments).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"assignees\":"
		out.RawString(prefix)
		(in.Assignees).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		(in.Author).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix)
		out.Int(int(in.Number))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal45(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal46(in *jlexer.Lexer, out *gitUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "avatarUrl":
			out.Avatar = string(in.String())
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal46(out *jwriter.Writer, in gitUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"avatarUrl\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(in.User).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v gitUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v gitUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *gitUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *gitUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal46(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal47(in *jlexer.Lexer, out *commentsNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]comment, 0, 1)
					} else {
						out.Nodes = []comment{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v40 comment
					(v40).UnmarshalEasyJSON(in)
					out.Nodes = append(out.Nodes, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal47(out *jwriter.Writer, in commentsNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix[1:])
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Nodes {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v commentsNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v commentsNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *commentsNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *commentsNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal47(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal48(in *jlexer.Lexer, out *comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "body":
			out.Body = string(in.String())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "author":
			(out.Author).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal48(out *jwriter.Writer, in comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		(in.Author).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal48(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal49(in *jlexer.Lexer, out *author) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "avatarUrl":
			out.Avatar = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal49(out *jwriter.Writer, in author) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"avatarUrl\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v author) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v author) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *author) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *author) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal49(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal50(in *jlexer.Lexer, out *assigneesNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]author, 0, 1)
					} else {
						out.Nodes = []author{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v43 author
					(v43).UnmarshalEasyJSON(in)
					out.Nodes = append(out.Nodes, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal50(out *jwriter.Writer, in assigneesNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix[1:])
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Nodes {
				if v44 > 0 {
					out.RawByte(',')
				}
				(v45).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v assigneesNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v assigneesNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *assigneesNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *assigneesNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal50(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal51(in *jlexer.Lexer, out *allOrgsResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "viewer":
			(out.Viewer).UnmarshalEasyJSON(in)
		case "rateLimit":
			(out.RateLimit).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal51(out *jwriter.Writer, in allOrgsResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"viewer\":"
		out.RawString(prefix[1:])
		(in.Viewer).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"rateLimit\":"
		out.RawString(prefix)
		(in.RateLimit).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v allOrgsResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v allOrgsResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *allOrgsResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *allOrgsResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal51(l, v)
}
func easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal52(in *jlexer.Lexer, out *allOrgViewOrg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "organizations":
			(out.Organizations).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal52(out *jwriter.Writer, in allOrgViewOrg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"organizations\":"
		out.RawString(prefix[1:])
		(in.Organizations).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v allOrgViewOrg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v allOrgViewOrg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptAgentNextGithubInternal52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *allOrgViewOrg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *allOrgViewOrg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptAgentNextGithubInternal52(l, v)
}
